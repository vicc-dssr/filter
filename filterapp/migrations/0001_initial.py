# Generated by Django 3.1.7 on 2021-03-23 17:23

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='FilterUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Code',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code_class', models.CharField(max_length=500)),
                ('code_value', models.CharField(max_length=500)),
                ('code_label', models.CharField(blank=True, max_length=500, null=True)),
                ('code_order', models.IntegerField(blank=True, null=True)),
                ('status', models.CharField(blank=True, default='ACTIVE', max_length=100, null=True)),
                ('status_date', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Domain',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('domain_name', models.CharField(max_length=200)),
                ('probability_without_entry', models.DecimalField(decimal_places=2, max_digits=3)),
                ('order_by', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='DomainCategory',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('category_name', models.CharField(max_length=200)),
                ('domain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='categories', to='filterapp.domain')),
            ],
            options={
                'db_table': 'filterapp_domain_category',
            },
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result', models.DecimalField(blank=True, decimal_places=1, max_digits=2, null=True)),
                ('pre_game_ranking1', models.IntegerField(blank=True, null=True)),
                ('pre_game_ranking2', models.IntegerField(blank=True, null=True)),
                ('post_game_ranking1', models.IntegerField(blank=True, null=True)),
                ('post_game_ranking2', models.IntegerField(blank=True, null=True)),
                ('status', models.CharField(blank=True, max_length=100, null=True)),
                ('status_date', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Institution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=2000)),
                ('status', models.CharField(blank=True, default='ACTIVE', max_length=100, null=True)),
                ('status_date', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain1', models.CharField(blank=True, max_length=500, null=True)),
                ('domain2', models.CharField(blank=True, max_length=500, null=True)),
                ('domain3', models.CharField(blank=True, max_length=500, null=True)),
                ('domain4', models.CharField(blank=True, max_length=500, null=True)),
                ('domain5', models.CharField(blank=True, max_length=500, null=True)),
                ('domain6', models.CharField(blank=True, max_length=500, null=True)),
                ('domain7', models.CharField(blank=True, max_length=500, null=True)),
                ('domain8', models.CharField(blank=True, max_length=500, null=True)),
                ('domain9', models.CharField(blank=True, max_length=500, null=True)),
                ('current_ranking', models.IntegerField(blank=True, null=True)),
                ('latest_game_id', models.IntegerField(blank=True, null=True)),
                ('status', models.CharField(blank=True, max_length=100, null=True)),
                ('status_date', models.DateTimeField(blank=True, null=True)),
                ('is_playing', models.CharField(blank=True, max_length=10, null=True)),
            ],
            options={
                'db_table': 'filterapp_patient',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UserGameAction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_type', models.CharField(max_length=200, null=True)),
                ('time_stamp', models.DateTimeField(blank=True, null=True)),
                ('game', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='game_actions', to='filterapp.game')),
                ('patient', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='patient_actions', to='filterapp.patient')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_actions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'filterapp_user_action',
            },
        ),
        migrations.CreateModel(
            name='PatientCategory',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('domainCategory', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='filterapp.domaincategory')),
            ],
            options={
                'db_table': 'filterapp_patient_category',
            },
        ),
        migrations.AddField(
            model_name='game',
            name='player1',
            field=models.ForeignKey(db_column='player1', on_delete=django.db.models.deletion.CASCADE, related_name='player1_games', to='filterapp.patient'),
        ),
        migrations.AddField(
            model_name='game',
            name='player2',
            field=models.ForeignKey(db_column='player2', on_delete=django.db.models.deletion.CASCADE, related_name='player2_games', to='filterapp.patient'),
        ),
        migrations.AddField(
            model_name='game',
            name='user',
            field=models.ForeignKey(blank=True, db_column='user_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='games', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='filterapp.filteruser')),
                ('inst_other', models.CharField(blank=True, max_length=500, null=True)),
                ('modality_other', models.CharField(blank=True, max_length=500, null=True)),
                ('ethnicity', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ethnicity', to='filterapp.code')),
                ('institution', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='filterapp.institution')),
                ('onco_modality', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='onco_modality', to='filterapp.code')),
                ('onco_population', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='onco_pupulation', to='filterapp.code')),
                ('race', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='race', to='filterapp.code')),
            ],
        ),
    ]
